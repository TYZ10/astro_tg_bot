import datetime
import logging
from math import ceil

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext, StorageKey, BaseStorage


from .basic import BasicBotOperation
from example_bot.misc.datetime_function import (get_day_and_hours_from_date as
                                                get_hour_or_day)
from example_bot.Tbot import states


class ApshedulerBot(BasicBotOperation):
    def __init__(self, config, operation_db, keyboard):
        super().__init__(
            config,
            operation_db,
            keyboard
        )
        self.scheduler: AsyncIOScheduler = AsyncIOScheduler(
            timezone='Europe/Moscow'
        )

    async def __start_prediction(
            self,
            user_id: int,
    ):

        text = """‚òÄÔ∏è –•–æ—á–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç –∑–≤—ë–∑–¥? –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ—á–µ—Ä–æ–º –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–æ 4 —Å—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã:
üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥–µ—Ç–∏
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
üë∂ –î–µ—Ç–∏ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –¢—ã –º–æ–∂–µ—à—å –µ—ë –æ—Ñ–æ—Ä–º–∏—Ç—å:
‚ú® –ó–∞ 2 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
‚ú® –ò–ª–∏ –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—É –≤—Å–µ–≥–æ 150 —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.

–ó–≤—ë–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Ç–∞–π–Ω—ã! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üöÄ"""

        state = FSMContext(
            self.config.STOR,
            StorageKey(
                self.config.bot.id,
                user_id,
                user_id
            )
        )

        await state.set_state(states.predictions_1_aspect)

        await state.update_data(period="day")

        await self.config.bot.send_message(
            text=text,
            reply_markup=self.keyboard.get_aspect_selection_ikb,
            chat_id=user_id
        )

    async def update_count_generation(self):

        await self.get_report()

        col_info = self.operation_db.COLUMNS_INFO

        all_info = self.operation_db.select_all_user_info_db(
            f"{col_info.userid}, {col_info.payments_end}, "
            f"{col_info.last_action}"
        )

        self.operation_db.update_all_user_info_db(
            {
                col_info.generation_count: 4
            }
        )

        for userid, payments_end, last_action in all_info:
            if payments_end:
                try:
                    days = get_hour_or_day(payments_end)

                    if days != 0:
                        self.operation_db.update_user_info_db(
                            {
                                col_info.generation_count: 10
                            },
                            userid=userid,
                        )

                        if days == 7 or days == 1:
                            await self.config.bot.send_message(
                                text=f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π "
                                     f"–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. ",
                                chat_id=userid
                            )
                except Exception as e:
                    logging.exception(e)

            past_day = get_hour_or_day(last_action, past=True)

            if past_day == 2 or past_day == 6 or past_day == 30:
                await self.config.bot.send_message(
                    text="""–ü—Ä–∏–≤–µ—Ç! üåü

–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∞ –∑–≤—ë–∑–¥—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –¥–ª—è —Ç–µ–±—è —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.

–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π. ‚ú® –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã! üöÄ""",
                    chat_id=userid
                )

    async def check_time_prediction(self):
        col_info = self.operation_db.COLUMNS_INFO

        time_now = datetime.datetime.now()

        all_info = self.operation_db.select_all_user_info_db(
            f"{col_info.time_prediction}, {col_info.payments_end}, "
            f"{col_info.userid}"
        )
        for time_prediction, payments_end, userid in all_info:
            if get_hour_or_day(payments_end) != 0:
                if time_now.minute == time_prediction.minute:
                    try:
                        await self.__start_prediction(
                            user_id=userid
                        )
                    except:
                        pass

    async def get_report(self):
        result = self.operation_db.select_all_user_info_db(
            f"{self.operation_db.COLUMNS_INFO.first_arrival}, "
            f"{self.operation_db.COLUMNS_INFO.generation_count}, "
            f"{self.operation_db.COLUMNS_INFO.payments_end}, "
            f"{self.operation_db.COLUMNS_INFO.referral_user}"
        )

        count_new_user = 0
        count_generations = 0
        count_referrals_user = 0

        for first_arrival, generation_count, payments_end, \
                referral_user in result:
            if get_hour_or_day(first_arrival) <= 1:
                count_new_user += 1
                if referral_user:
                    count_referrals_user += 1

            try:
                if payments_end and \
                        get_hour_or_day(payments_end, get_hour=True) != 0:
                    count_generations += 10 - generation_count
                else:
                    count_generations += 4 - generation_count
            except:
                count_generations += 4 - generation_count

        for i in self.config.ADMINS_ID:
            try:
                await self.config.bot.send_message(
                    text=(f"–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                          f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_new_user}\n"
                          f"–ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {count_generations}\n"
                          f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_referrals_user}\n"),
                    chat_id=i
                )
            except:
                pass

    async def on_startup(self):
        self.scheduler.add_job(self.update_count_generation,
                               'cron', hour=18, minute=3)
        self.scheduler.add_job(
            self.check_time_prediction,
            'interval',
            minutes=1
        )
        try:
            self.scheduler.start()
        except:
            pass

    def create_router(self):
        print("start bot")

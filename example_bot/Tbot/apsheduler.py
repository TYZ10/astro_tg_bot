import datetime
import logging
from math import ceil

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.fsm.context import FSMContext, StorageKey, BaseStorage


from .basic import BasicBotOperation
from example_bot.misc.datetime_function import (get_day_and_hours_from_date as
                                                get_hour_or_day)
from example_bot.Tbot import states
from .generation.get_info_gpt import main_get_info_gpt
from ..misc import create_aspects


class ApshedulerBot(BasicBotOperation):
    def __init__(self, config, operation_db, keyboard):
        super().__init__(
            config,
            operation_db,
            keyboard
        )
        self.scheduler: AsyncIOScheduler = AsyncIOScheduler(
            timezone='Europe/Moscow'
        )

    async def __start_prediction(
            self,
            user_id: int,
    ):
        col_info = self.operation_db.COLUMNS_INFO

        (place_birth, latitude, longitude, time_birth,
         data_birth, aspects_user) = self.operation_db.select_user_info_db(
            f"{col_info.place_birth}, "
            f"{col_info.latitude}, "
            f"{col_info.longitude}, "
            f"{col_info.time_birth}, "
            f"{col_info.data_birth}, "
            f"{col_info.aspects}",
            user_id,
            many=True
        )

        aspects = create_aspects(
            f"{data_birth} {time_birth}",
            latitude,
            longitude
        )

        text = f"""–¢—ã ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º, —Å–æ–∑–¥–∞—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–π, —Ç–µ–ø–ª—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫—É –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø—Ä–æ–∂–∏—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ö–∞–∫ —Ç—ã –ø–∏—à–µ—à—å: ‚Äî –ü—Ä–æ—Å—Ç—ã–º, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º, –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤. ‚Äî –ë–µ–∑ –≥–µ–Ω–¥–µ—Ä–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π ‚Äì –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è –º—É–∂—á–∏–Ω—ã, —Ç–∞–∫ –∏ –¥–ª—è –∂–µ–Ω—â–∏–Ω—ã. ‚Äî –ë–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (*, #, _, -, +, [, ] –∏ –¥—Ä—É–≥–∏—Ö). ‚Äî –ë–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown, HTML –∏ Telegram-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. ‚Äî –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–ª–æ—à–Ω—ã–º, –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–¥–∞, –≤—ã–¥–µ–ª–µ–Ω–∏–π –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤: ‚Äî –í—Å—Ç–∞–≤–ª—è–π –æ—Ç 20 –¥–æ 40 —Å–º–∞–π–ª–∏–∫–æ–≤ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É. ‚Äî –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç —ç–º–æ—Ü–∏–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π —Å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤ –æ–¥–Ω–æ–º –∞–±–∑–∞—Ü–µ. ‚Äî –†–∞–∑–º–µ—â–∞–π —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞. ‚Äî –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ —Å–º–∞–π–ª–∏–∫–∏ –ø–æ–¥—Ä—è–¥. ‚Äî –°–º–∞–π–ª–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–º–µ—Å—Ç–Ω—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞:

–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ [–¥–∞—Ç–∞]

–û–±—â–∏–π –Ω–∞—Å—Ç—Ä–æ–π –¥–Ω—è

–ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –æ—â—É—â–∞—é—Ç—Å—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å ‚Äì –¥–∏–Ω–∞–º–∏—á–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π, —Ç—Ä–µ–±—É—é—â–∏–π –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏, –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

–ö–∞–∫–∏–µ —Å—Ñ–µ—Ä—ã –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã ‚Äì —Ä–∞–±–æ—Ç–∞, —Ñ–∏–Ω–∞–Ω—Å—ã, —ç–º–æ—Ü–∏–∏, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç–Ω–æ—à–µ–Ω–∏—è.

–ö–∞–∫–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º ‚Äì –≥–∏–±–∫–æ—Å—Ç—å, —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ç–µ—Ä–ø–µ–Ω–∏–µ, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.

–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç 4 –∞—Å–ø–µ–∫—Ç–∞ –∏–∑ 8 –≤–æ–∑–º–æ–∂–Ω—ã—Ö.

–¢–æ–ª—å–∫–æ –ø–æ —ç—Ç–∏–º 4 –∞—Å–ø–µ–∫—Ç–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä–æ–≥–Ω–æ–∑.

–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å–ø–µ–∫—Ç–∞.

–í–æ–∑–º–æ–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã (–∏–∑ –Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç 4):

–§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞, –°–µ–º—å—è –∏ –¥–µ—Ç–∏, –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è, –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –î–µ—Ç–∏ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ, –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∞—Å–ø–µ–∫—Ç—É:

1. –ö–∞–∫ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞—Å–ø–µ–∫—Ç? 2. –ß—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è? 3. –ö–∞–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ?

–ò—Ç–æ–≥ –¥–Ω—è –∏ –∫–ª—é—á–µ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è

–ò—Ç–æ–≥ –¥–Ω—è ‚Äì –æ–¥–Ω–∞ —Ñ—Ä–∞–∑–∞, –ø–µ—Ä–µ–¥–∞—é—â–∞—è –µ–≥–æ –æ–±—â–∏–π —Å–º—ã—Å–ª.

–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç ‚Äì —á—Ç–æ –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ–±—ã –¥–µ–Ω—å –ø—Ä–æ—à–µ–ª –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: {aspects_user}

–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã """


        text_gpt = await main_get_info_gpt(
            self.config,
            f"{aspects}",
            text
        )
        if len(str(text_gpt)) > 4096:
            await self.config.bot.send_message(
                text=str(text_gpt)[:4096],
                chat_id=user_id
            )
            await self.config.bot.send_message(
                text=str(text_gpt)[4096:],
                chat_id=user_id
            )
        else:
            await self.config.bot.send_message(
                text=str(text_gpt),
                chat_id=user_id
            )

    async def update_count_generation(self):

        await self.get_report()

        col_info = self.operation_db.COLUMNS_INFO

        all_info = self.operation_db.select_all_user_info_db(
            f"{col_info.userid}, {col_info.payments_end}, "
            f"{col_info.last_action}"
        )

        self.operation_db.update_all_user_info_db(
            {
                col_info.generation_count: 4
            }
        )

        for userid, payments_end, last_action in all_info:
            if payments_end:
                try:
                    days = get_hour_or_day(payments_end)

                    if days != 0:
                        self.operation_db.update_user_info_db(
                            {
                                col_info.generation_count: 10
                            },
                            userid=userid,
                        )

                        if days == 7 or days == 1:
                            await self.config.bot.send_message(
                                text=f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π "
                                     f"–¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. ",
                                chat_id=userid
                            )
                except Exception as e:
                    logging.exception(e)

            past_day = get_hour_or_day(last_action, past=True)

            if past_day == 2 or past_day == 6 or past_day == 30:
                await self.config.bot.send_message(
                    text="""–ü—Ä–∏–≤–µ—Ç! üåü

–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∞ –∑–≤—ë–∑–¥—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å –¥–ª—è —Ç–µ–±—è —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.

–ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –µ–≥–æ —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏—è.

–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å —Å–≤–æ—ë –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π. ‚ú® –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã! üöÄ""",
                    chat_id=userid
                )

    async def check_time_prediction(self):
        col_info = self.operation_db.COLUMNS_INFO

        time_now = datetime.datetime.now()

        all_info = self.operation_db.select_all_user_info_db(
            f"{col_info.time_prediction}, {col_info.payments_end}, "
            f"{col_info.userid}"
        )
        for time_prediction, payments_end, userid in all_info:
            if get_hour_or_day(payments_end) != 0:
                if time_now.minute == time_prediction.minute:
                    try:
                        await self.__start_prediction(
                            user_id=userid
                        )
                    except:
                        pass

    async def get_report(self):
        result = self.operation_db.select_all_user_info_db(
            f"{self.operation_db.COLUMNS_INFO.first_arrival}, "
            f"{self.operation_db.COLUMNS_INFO.generation_count}, "
            f"{self.operation_db.COLUMNS_INFO.payments_end}, "
            f"{self.operation_db.COLUMNS_INFO.referral_user}"
        )

        count_new_user = 0
        count_generations = 0
        count_referrals_user = 0

        for first_arrival, generation_count, payments_end, \
                referral_user in result:
            if get_hour_or_day(first_arrival) <= 1:
                count_new_user += 1
                if referral_user:
                    count_referrals_user += 1

            try:
                if payments_end and \
                        get_hour_or_day(payments_end, get_hour=True) != 0:
                    count_generations += 10 - generation_count
                else:
                    count_generations += 4 - generation_count
            except:
                count_generations += 4 - generation_count

        for i in self.config.ADMINS_ID:
            try:
                await self.config.bot.send_message(
                    text=(f"–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
                          f"–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_new_user}\n"
                          f"–ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {count_generations}\n"
                          f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count_referrals_user}\n"),
                    chat_id=i
                )
            except:
                pass

    async def on_startup(self):
        self.scheduler.add_job(self.update_count_generation,
                               'cron', hour=18, minute=3)
        self.scheduler.add_job(
            self.check_time_prediction,
            'interval',
            minutes=1
        )
        try:
            self.scheduler.start()
        except:
            pass

    def create_router(self):
        print("start bot")

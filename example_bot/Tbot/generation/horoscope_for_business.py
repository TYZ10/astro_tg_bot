from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from . import AllTypesGeneration
from example_bot.Tbot import BasicBotOperation
from .get_info_gpt import main_get_info_gpt, create_aspects


class HoroscopeForBusiness(BasicBotOperation):

    text = "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –°–æ–∑–¥–∞–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: 1) –í–≤–µ–¥–µ–Ω–∏–µ ‚Äî —Ü–µ–ª—å –∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞, 2) –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å ‚Äî –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –∞–¥–∞–ø—Ç–∞—Ü–∏—è, –º–æ—Ç–∏–≤–∞—Ü–∏—è, 3) –ö–∞—Ä—Ç–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤ ‚Äî —Ñ–∏–Ω–∞–Ω—Å—ã, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, 4) –ó–æ–Ω—ã —Ä–æ—Å—Ç–∞ ‚Äî —Ä–∏—Å–∫–∏, –≤—ã–∑–æ–≤—ã, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, 5) –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥—ã, —Ä–∏—Å–∫–∏, 6) –ü–µ—Ä–∏–æ–¥—ã —É—Å–ø–µ—Ö–∞ ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ä–æ—Å—Ç, –∫—Ä–∏–∑–∏—Å—ã, 7) –§–∏–Ω–∞–Ω—Å—ã ‚Äî —Å—Ç–∏–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, —Ä–∞—Å—Ö–æ–¥—ã, 8) –ö–æ–º–∞–Ω–¥–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ ‚Äî –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ–º–∞–Ω–¥–∞, 9) –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–∏–¥–µ–Ω–∏–µ ‚Äî –≤–ª–∏—è–Ω–∏–µ, –º–∏—Å—Å–∏—è, –Ω–∞—Å–ª–µ–¥–∏–µ, 10) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –∏—Ç–æ–≥–∏, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —Å–æ–≤–µ—Ç—ã. –°–¥–µ–ª–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –≥–ª—É–±–æ–∫–∏–º, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. —Ä–µ—Å–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. #–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—ã–≤–æ–¥ —Å–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –Ω–æ –æ–±—ä—ë–º–Ω—ã–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç, –∞—Å–ø–µ–∫—Ç–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—É—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏."

    async def horoscope_for_business(
            self,
            call: types.CallbackQuery,
            state: FSMContext):

        await call.message.answer("""üíº –•–æ—á–µ—à—å –≤—ã—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É? –ë–∏–∑–Ω–µ—Å-–≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º —Å –ª—ë–≥–∫–æ—Å—Ç—å—é –∏ –≥–∞—Ä–º–æ–Ω–∏–µ–π. –ú—ã –ø–æ–º–æ–∂–µ–º —Ç–µ–±–µ:
‚ú® –ù–∞–π—Ç–∏ —Å–≤–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–∞—Ä—å–µ—Ä–µ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ñ–µ—Ä–µ.
üöÄ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Ä–µ—à–µ–Ω–∏–π.
üåü –£–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —É—Å–∏–ª–∏—è–º–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–¥–∞—á–µ–π.

–ó–≤—ë–∑–¥—ã —É–∫–∞–∂—É—Ç –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ. üí∞""")

        col_info = self.operation_db.COLUMNS_INFO

        (place_birth, latitude, longitude, time_birth,
         data_birth) = self.operation_db.select_user_info_db(
            f"{col_info.place_birth}, "
            f"{col_info.latitude}, "
            f"{col_info.longitude}, "
            f"{col_info.time_birth}, "
            f"{col_info.data_birth}",
            call.from_user.id,
            many=True
        )

        aspects = create_aspects(
            f"{data_birth} {time_birth}",
            latitude,
            longitude
        )

        text_gpt = await main_get_info_gpt(
            self.config,
            aspects,
            self.text
        )
        (count_generation,
         generation_count_all) = self.operation_db.select_user_info_db(
            f"{self.operation_db.COLUMNS_INFO.generation_count}, "
            f"{self.operation_db.COLUMNS_INFO.generation_count_all}",
            call.from_user.id,
            many=True
        )

        self.operation_db.update_user_info_db(
            {
                self.operation_db.COLUMNS_INFO.generation_count: count_generation - 1,
                self.operation_db.COLUMNS_INFO.generation_count_all: generation_count_all + 1,
            },
            call.from_user.id
        )

        await call.message.answer(
            text=str(text_gpt)
        )

        await call.message.answer(
            text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {count_generation - 1}",
            reply_markup=self.keyboard.main_menu_kb
        )

        await state.clear()

    def create_router(self):
        self.router.callback_query.register(
            self.horoscope_for_business,
            F.data == "start generation",
            StateFilter(AllTypesGeneration.horoscope_for_business.state)
        )

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from . import AllTypesGeneration
from example_bot.Tbot import BasicBotOperation, states
from .get_info_gpt import main_get_info_gpt
from ...misc import create_aspects


class NatalChartAnalysis(BasicBotOperation):

    text = "#–†–æ–ª—å: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. #–ó–∞–¥–∞–Ω–∏–µ: –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏.  –¢–∞–∫–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –æ–±—ä—è—Å–Ω–∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ, –¥–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—Ä–∏–º–µ—Ä—ã –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è. #–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—ã–≤–æ–¥ —Å–¥–µ–ª–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –Ω–æ –æ–±—ä—ë–º–Ω—ã–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç, –∞—Å–ø–µ–∫—Ç–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—É—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã –∂–∏–∑–Ω–∏. –£–∫–∞–∂–∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã: "

    async def main_menu_natal_chart_analysis(self, message: types.Message):
        await message.answer(
            text="""–¢–≤–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∑–≤—ë–∑–¥–Ω—ã–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–ª–∞–Ω—Ç—ã, —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø—É—Ç—å –∫ –≥–∞—Ä–º–æ–Ω–∏–∏. üåå –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –∑–≤—ë–∑–¥ –Ω–∞ —Ç–≤–æ—é –∂–∏–∑–Ω—å, —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ:

ü™ê –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–≥–æ –∑–≤—ë–∑–¥–Ω–æ–≥–æ –∫–æ–¥–∞: –ª–∏—á–Ω–æ—Å—Ç—å, —Å—É–¥—å–±–∞, —Å–∫—Ä—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.

‚ú® –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Äî —Ç–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–æ—Ä—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π –∏ —Ä–∞—Å–∫—Ä—ã—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª.

üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –∫–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ—ë –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–µ–±—è, –∫–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥—É—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —É—Å–ø–µ—Ö—É.

–í—ã–±–∏—Ä–∞–π –∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–π —Ç–∞–π–Ω—ã —Å–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã! üî•üí´""",
            reply_markup=self.keyboard.natal_card_menu_ikb
        )

    async def natal_chart_analysis(self, call: types.CallbackQuery,
                                   state: FSMContext):
        await call.message.answer(
            text="""‚ú® –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–µ–≥–æ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è. –ö–∞—Ä—Ç–∞ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ —Ç–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö, —Å–∫—Ä—ã—Ç—ã—Ö —Ç–∞–ª–∞–Ω—Ç–∞—Ö, –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö –∏ –ø–æ–º–æ–∂–µ—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è. üåå"

–ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ –≤—ã–±–æ—Ä –∞—Å–ø–µ–∫—Ç–æ–≤:

"–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±–µ—Ä–∏ 2 –∞—Å–ø–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã. –í–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã:

üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥–µ—Ç–∏
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
üë∂ –î–µ—Ç–∏ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–¥ —Ç–≤–æ–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã. –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ–±–µ –∏ —Å–≤–æ—ë–º –ø—É—Ç–∏! üå†""",
            reply_markup=self.keyboard.get_aspect_selection_ikb
        )
        await state.set_state(states.natal_chart_analysis_1_aspect)

    async def natal_chart_analysis_1_aspect(self, call: types.CallbackQuery,
                                            state: FSMContext):
        await state.update_data(
            one_aspect=call.data
        )
        await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç")

        await state.set_state(states.natal_chart_analysis_2_aspect)

    async def natal_chart_analysis_2_aspect(self, call: types.CallbackQuery,
                                            state: FSMContext):
        st = await state.get_data()

        one_aspect = st['one_aspect']

        if one_aspect == call.data:
            await call.answer(f"–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ç–æ—Ä–æ–π –∞—Å–ø–µ–∫—Ç –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç "
                              f"{one_aspect}")
            return

        await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ...")

        col_info = self.operation_db.COLUMNS_INFO

        (place_birth, latitude, longitude, time_birth,
         data_birth) = self.operation_db.select_user_info_db(
            f"{col_info.place_birth}, "
            f"{col_info.latitude}, "
            f"{col_info.longitude}, "
            f"{col_info.time_birth}, "
            f"{col_info.data_birth}",
            call.from_user.id,
            many=True
        )

        aspects = create_aspects(
            f"{data_birth} {time_birth}",
            latitude,
            longitude
        )

        text_gpt = await main_get_info_gpt(
            self.config,
            f"{one_aspect} {call.data}\n\n {aspects}",
            self.text
        )
        (count_generation,
         generation_count_all) = self.operation_db.select_user_info_db(
            f"{self.operation_db.COLUMNS_INFO.generation_count}, "
            f"{self.operation_db.COLUMNS_INFO.generation_count_all}",
            call.from_user.id,
            many=True
        )

        self.operation_db.update_user_info_db(
            {
                self.operation_db.COLUMNS_INFO.generation_count: count_generation - 1,
                self.operation_db.COLUMNS_INFO.generation_count_all: generation_count_all + 1,
            },
            call.from_user.id
        )

        await call.message.answer(
            text=str(text_gpt)
        )

        await call.message.answer(
            text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {count_generation - 1}",
            reply_markup=self.keyboard.main_menu_kb
        )

        await state.clear()

    def create_router(self):
        self.router.message.register(
            self.main_menu_natal_chart_analysis,
            F.text == "üîÆ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"
        )
        self.router.callback_query.register(
            self.natal_chart_analysis,
            F.data == "start generation",
            StateFilter(AllTypesGeneration.natal_chart_analysis.state)
        )
        self.router.callback_query.register(
            self.natal_chart_analysis_1_aspect,
            StateFilter(states.natal_chart_analysis_1_aspect)
        )
        self.router.callback_query.register(
            self.natal_chart_analysis_2_aspect,
            StateFilter(states.natal_chart_analysis_2_aspect)
        )

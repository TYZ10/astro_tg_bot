from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from . import AllTypesGeneration
from example_bot.Tbot import BasicBotOperation
from .get_info_gpt import main_get_info_gpt
from example_bot.Config_bot import states
from example_bot.misc import create_aspects
from example_bot.misc.datetime_function import get_day_and_hours_from_date


class Predictions(BasicBotOperation):
    text = """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ {}, —É—á–∏—Ç—ã–≤–∞—è –¥–≤–∞ –∞—Å–ø–µ–∫—Ç–∞, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É: 1) –í–≤–µ–¥–µ–Ω–∏–µ ‚Äî —Ü–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –∏ –µ–≥–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –¥–Ω—è. 2) –û–±—â–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞ –¥–Ω—è ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. 3) {} ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤, –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–æ–±—ã—Ç–∏—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –º–∏–Ω–∏–º—É–º 2000 –∑–Ω–∞–∫–æ–≤. (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–∏–Ω–∞–Ω—Å—ã, –∑–¥–æ—Ä–æ–≤—å–µ, –∫–∞—Ä—å–µ—Ä–∞, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å). 4) –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –ø—Ä–æ–≥–Ω–æ–∑, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –∏ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–Ω—è. 5) –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–Ω—è ‚Äî –ø–µ—Ä–∏–æ–¥—ã –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. 6) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —É—á–∏—Ç—ã–≤–∞—é—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã, –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. 7) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –Ω–∞ –¥–µ–Ω—å. 8) –°–æ–≤–µ—Ç –¥–Ω—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ä–º–∏–Ω—ã –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –∏–ª–∏ –∞—Å–ø–µ–∫—Ç–æ–≤, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—É—Ç—å –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–ª–∏—è–Ω–∏—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å—Ñ–µ—Ä—ã."""

    async def main_start_predictions(
            self,
            message: types.Message,
            state: FSMContext,
    ):
        await state.set_state(AllTypesGeneration()[message.text])
        await message.answer(
            text="""–ó–≤—ë–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–µ–±–µ —Ç–∞–π–Ω—ã –±—É–¥—É—â–µ–≥–æ! ‚ú® –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∏ –æ–±—Ö–æ–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑:

üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª–∏–∂–∞–π—à–∏—Ö 30 –¥–Ω–µ–π: –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã–∑–æ–≤—ã –∏ –ø–µ—Ä–∏–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

üíº –ë–∏–∑–Ω–µ—Å-–≥–æ—Ä–æ—Å–∫–æ–ø ‚Äî –∫–æ–≥–¥–∞ –ª—É—á—à–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã, —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –∏—Å–∫–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.

‚ù§Ô∏è‚Äçü©π –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è ‚Äî –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–æ–≥–¥–∞ –±–µ—Ä–µ—á—å —Å–µ–±—è, –∞ –∫–æ–≥–¥–∞ –Ω–∞–æ–±–æ—Ä–æ—Ç ‚Äî –∑–∞—Ä—è–∂–∞—Ç—å—Å—è —ç–Ω–µ—Ä–≥–∏–µ–π –∏ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å.

‚òÄÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã ‚Äî –ø–æ–ª—É—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –∂–∏—Ç—å –≤ —Ä–∏—Ç–º–µ —Å–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π (–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ).

üíû –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö ‚Äî —Ä–∞–∑–±–æ—Ä –≥–ª—É–±–∏–Ω—ã –≤–∞—à–µ–π —Å–≤—è–∑–∏, –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –ø–∞—Ä—ã, —Å–æ–≤–µ—Ç—ã –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ —Ä–æ—Å—Ç–∞.

–ë—É–¥—É—â–µ–µ —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∑–≤—ë–∑–¥–∞—Ö, –∞ —Ç–µ–ø–µ—Ä—å –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è —Ç–µ–±—è! üî•üåå""",
            reply_markup=self.keyboard.predictions_and_horoscopes_ikb
        )

    async def daily_forecasts(
            self,
            message: types.Message
    ):
        await message.answer(
            text="""‚òÄÔ∏è –•–æ—á–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç –∑–≤—ë–∑–¥? –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ—á–µ—Ä–æ–º –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–æ 4 —Å—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã:
üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥–µ—Ç–∏
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
üë∂ –î–µ—Ç–∏ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –¢—ã –º–æ–∂–µ—à—å –µ—ë –æ—Ñ–æ—Ä–º–∏—Ç—å:
‚ú® –ó–∞ 2 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
‚ú® –ò–ª–∏ –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—É –≤—Å–µ–≥–æ 150 —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.

–ó–≤—ë–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Ç–∞–π–Ω—ã! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üöÄ""",
            reply_markup=self.keyboard.daily_forecasts_ikb
        )

    async def selection_predictions(
            self,
            call: types.CallbackQuery
    ):
        await call.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
            reply_markup=self.keyboard.selection_predictions_ikb
        )

    async def get_predictions(
            self,
            call: types.CallbackQuery,
            state: FSMContext):
        _, period = call.data.split("_", maxsplit=1)

        if period == "day":
            text = """‚òÄÔ∏è –•–æ—á–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç –∑–≤—ë–∑–¥? –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ—á–µ—Ä–æ–º –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–æ 4 —Å—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã:
üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥–µ—Ç–∏
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
üë∂ –î–µ—Ç–∏ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –¢—ã –º–æ–∂–µ—à—å –µ—ë –æ—Ñ–æ—Ä–º–∏—Ç—å:
‚ú® –ó–∞ 2 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
‚ú® –ò–ª–∏ –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—É –≤—Å–µ–≥–æ 150 —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.

–ó–≤—ë–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Ç–∞–π–Ω—ã! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üöÄ"""

            col_info = self.operation_db.COLUMNS_INFO

            payments_end = self.operation_db.select_user_info_db(
                col_info.payments_end,
                call.from_user.id
            )

            if get_day_and_hours_from_date(payments_end) <= 0:
                await call.message.answer(
                    text="""–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –¢—ã –º–æ–∂–µ—à—å –µ—ë –æ—Ñ–æ—Ä–º–∏—Ç—å:
‚ú® –ó–∞ 2 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
‚ú® –ò–ª–∏ –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—É –≤—Å–µ–≥–æ 150 —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.
""",
                    reply_markup=self.keyboard.payments_ikb
                )
                return
        elif period == "month":
             text = """üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü ‚Äî —ç—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π. –¢—ã —É–∑–Ω–∞–µ—à—å, –≥–¥–µ —Ç–µ–±—è –∂–¥—ë—Ç —É—Å–ø–µ—Ö, –∞ –≥–¥–µ —Å—Ç–æ–∏—Ç –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ. –ó–≤—ë–∑–¥—ã –ø–æ–¥—Å–∫–∞–∂—É—Ç –ª—É—á—à–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π. üåô"

–ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ –≤—ã–±–æ—Ä –∞—Å–ø–µ–∫—Ç–æ–≤:
"–ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–±–µ—Ä–∏ 2 –∞—Å–ø–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã:

üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üè† –°–µ–º—å—è –∏ –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü —É–Ω–∏–∫–∞–ª–µ–Ω, –∏ —ç—Ç–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –º–∞–∫—Å–∏–º—É–º. –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ —É–∑–Ω–∞–≤–∞–π, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç! üå†"""
        else:
            text = """üóìÔ∏è –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –≥–æ–¥ ‚Äî —ç—Ç–æ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ —Ü–µ–ª—ã–π –≥–æ–¥. –¢—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∑–æ–≤—ã –∂–¥—É—Ç —Ç–µ–±—è, –≤ –∫–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã —Å—Ç–æ–∏—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, –∞ –∫–æ–≥–¥–∞ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É. –í—Å—ë —ç—Ç–æ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö! üåü"


–ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ –≤—ã–±–æ—Ä –∞—Å–ø–µ–∫—Ç–æ–≤:
"–ü–µ—Ä–µ–¥ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—ã–±–µ—Ä–∏ 2 –∞—Å–ø–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã:

üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üè† –°–µ–º—å—è –∏ –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
–¢–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–º–æ–∂–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –≥–∞—Ä–º–æ–Ω–∏–∏ —Å —ç–Ω–µ—Ä–≥–∏—è–º–∏ –≥–æ–¥–∞. –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –≥–æ—Ç–æ–≤—å—Å—è –∫ 2025 –≥–æ–¥—É! üöÄ
"""

        await state.update_data(period=period)

        await call.message.answer(
            text=text,
            reply_markup=self.keyboard.get_aspect_selection_ikb
        )
        await state.set_state(states.predictions_1_aspect)

    async def predictions_1_aspect(
            self,
            call: types.CallbackQuery,
            state: FSMContext
    ):
        await state.update_data(
            one_aspect=call.data
        )
        await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç")

        await state.set_state(states.predictions_2_aspect)

    async def predictions_2_aspect(
            self,
            call: types.CallbackQuery,
            state: FSMContext
    ):

        st = await state.get_data()
        period = st["period"]

        one_aspect = st['one_aspect']
        two_aspects = st.get("two_aspect")
        three_aspects = st.get("three_aspect")

        if (one_aspect == call.data or two_aspects == call.data or
                three_aspects == call.data):
            await call.answer(f"–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã!!")
            return

        if period == "day":
            if two_aspects:
                if three_aspects:
                    all_aspects = (f"{one_aspect}, {two_aspects}, ",
                                   f"{three_aspects}, {call.data}")
                else:
                    await state.update_data(
                        three_aspect=call.data
                    )
                    await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç")
                    return
            else:
                await state.update_data(
                    two_aspect=call.data
                )
                await call.answer("–í—ã–±–µ—Ä–∏—Ç–µ –µ—â—ë –æ–¥–∏–Ω –∞—Å–ø–µ–∫—Ç")
                return

        col_info = self.operation_db.COLUMNS_INFO

        (place_birth, latitude, longitude, time_birth,
         data_birth) = self.operation_db.select_user_info_db(
            f"{col_info.place_birth}, "
            f"{col_info.latitude}, "
            f"{col_info.longitude}, "
            f"{col_info.time_birth}, "
            f"{col_info.data_birth}",
            call.from_user.id,
            many=True
        )

        if place_birth is None or time_birth is None or data_birth is None:
            text = "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."
            keyboard = self.keyboard.no_generation_data_ikb
            await call.message.edit_text(text=text, reply_markup=keyboard)
            await state.clear()
            return

        await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è 25-35 —Å–µ–∫—É–Ω–¥ ")

        aspects = create_aspects(
            f"{data_birth} {time_birth}",
            latitude,
            longitude
        )

        if period == "day":
            text = self.text.format("–Ω–∞ –¥–µ–Ω—å", all_aspects)
        elif period == "month":
            text = self.text.format("–Ω–∞ –º–µ—Å—è—Ü", f"{one_aspect} {call.data}")
        else:
            text = self.text.format("–Ω–∞ –≥–æ–¥", f"{one_aspect} {call.data}")

        text_gpt = await main_get_info_gpt(
            self.config,
            f"{aspects}",
            text
        )
        (count_generation,
         generation_count_all) = self.operation_db.select_user_info_db(
            f"{self.operation_db.COLUMNS_INFO.generation_count}, "
            f"{self.operation_db.COLUMNS_INFO.generation_count_all}",
            call.from_user.id,
            many=True
        )

        self.operation_db.update_user_info_db(
            {
                self.operation_db.COLUMNS_INFO.generation_count: count_generation - 1,
                self.operation_db.COLUMNS_INFO.generation_count_all: generation_count_all + 1,
            },
            call.from_user.id
        )

        if len(str(text_gpt)) > 4096:
            await call.message.answer(str(text_gpt)[:4096])
            await call.message.answer(str(text_gpt)[4096:])
        else:
            await call.message.answer(
                text=str(text_gpt)
            )

        await call.message.answer(
            text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {count_generation - 1}",
            reply_markup=self.keyboard.main_menu_kb
        )

        await state.clear()

    def create_router(self):
        self.router.message.register(
            self.main_start_predictions,
            F.text == "üåü –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ –≥–æ—Ä–æ—Å–∫–æ–ø—ã"
        )
        self.router.message.register(
            self.daily_forecasts,
            F.text == "‚òÄÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã"
        )
        self.router.callback_query.register(
            self.selection_predictions,
            F.data == "start generation",
            StateFilter(AllTypesGeneration.predictions.state)
        )
        self.router.callback_query.register(
            self.get_predictions,
            F.data.split("_")[0] == "select prediction",
            StateFilter(AllTypesGeneration.predictions.state)
        )
        self.router.callback_query.register(
            self.predictions_1_aspect,
            StateFilter(states.predictions_1_aspect)
        )
        self.router.callback_query.register(
            self.predictions_2_aspect,
            StateFilter(states.predictions_2_aspect)
        )

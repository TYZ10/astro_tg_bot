from datetime import datetime

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter
from example_bot.misc.datetime_function import get_day_and_hours_from_date

from example_bot.Tbot import BasicBotOperation
from example_bot.Tbot import states


class SetPredictions(BasicBotOperation):
    from example_bot.Tbot.apsheduler import ApshedulerBot

    def __init__(self, config, operation_db, keyboard,
                 apscheduler: ApshedulerBot):
        super().__init__(config, operation_db, keyboard)
        self.apscheduler = apscheduler

    async def start_prediction(
            self,
            message: types.Message,
            state: FSMContext,
            main_time_prediction: datetime,
    ):
        if main_time_prediction.hour != datetime.now().hour:
            return

        payments_end = self.operation_db.select_user_info_db(
            self.operation_db.COLUMNS_INFO.payments_end,
            message.from_user.id
        )

        if get_day_and_hours_from_date(payments_end, get_hour=True) == 0:
            return
        
        text = """‚òÄÔ∏è –•–æ—á–µ—à—å –Ω–∞—á–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –ø–æ–¥—Å–∫–∞–∑–æ–∫ –æ—Ç –∑–≤—ë–∑–¥? –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ—á–µ—Ä–æ–º –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–æ 4 —Å—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–µ –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã:
üíº –§–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è –∏ –¥–µ—Ç–∏
‚ù§Ô∏è –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
üåü –î—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ
üè• –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è
‚ö†Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
üë∂ –î–µ—Ç–∏ –∏ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ
‚ú® –ú–∏—Å—Å–∏—è –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –¢—ã –º–æ–∂–µ—à—å –µ—ë –æ—Ñ–æ—Ä–º–∏—Ç—å:
‚ú® –ó–∞ 2 –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞—é—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.
‚ú® –ò–ª–∏ –∑–∞ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –ø–ª–∞—Ç—É –≤—Å–µ–≥–æ 150 —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã.

–ó–≤—ë–∑–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Ç–∞–π–Ω—ã! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –∏ –Ω–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üöÄ"""

        await state.set_state(states.predictions_1_aspect)

        await state.update_data(period="day")

        await message.answer(
            text=text,
            reply_markup=self.keyboard.get_aspect_selection_ikb
        )

    async def set_prediction(
            self,
            message: types.Message,
            state: FSMContext):

        set_time = message.text
        try:
            set_time = datetime.strptime(set_time, '%H %M').time()
        except:
            await message.answer(
                text=("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏."
                      "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ "
                      "—Ñ–æ—Ä–º–∞—Ç–µ HH MM (–ß–∞—Å—ã –º–∏–Ω—É—Ç—ã) —á–∏—Å–ª–∞–º–∏!\n\n"
                      "–ü—Ä–∏–º–µ—Ä: 12 30"),
                reply_markup=self.keyboard.abolition_ikb)
            return

        time_prediction = self.operation_db.select_user_info_db(
            self.operation_db.COLUMNS_INFO.time_prediction,
            message.from_user.id
        )

        self.apscheduler.scheduler.add_job(
            self.start_prediction,
            'cron',
            hour=set_time.hour,
            minute=set_time.minute,
            args=[message, state, time_prediction]
        )

        self.operation_db.update_user_info_db(
            {
                self.operation_db.COLUMNS_INFO.time_prediction: set_time
            },
            userid=message.from_user.id
        )

        await message.answer(
            text="–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑.",
            reply_markup=self.keyboard.main_menu_kb
        )

        await state.clear()

    def create_router(self):
        self.router.message.register(
            self.set_prediction,
            StateFilter(states.set_time_prediction)
        )


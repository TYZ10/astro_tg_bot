from aiogram import types
from aiogram.fsm.context import FSMContext

from . import AllTypesGeneration
from example_bot.Tbot import BasicBotOperation


class StartAllGeneration(BasicBotOperation):
    # –ù–∞—á–∞–ª–æ –ª—é–±–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏

    async def start_generation(self,
                               message: types.Message,
                               state: FSMContext):
        col_info = self.operation_db.COLUMNS_INFO

        count_generation, referral_user, generation_count_all = \
            self.operation_db.select_user_info_db(
                f"{col_info.generation_count}, "
                f"{col_info.referral_user},"
                f"{col_info.generation_count_all}",
                message.from_user.id,
                many=True
            )

        if generation_count_all == 0:
            if referral_user:
                referrals_count, referral_all_count_points_user = \
                    self.operation_db.select_user_info_db(
                        f"{col_info.referrals_count}, "
                        f"{col_info.referral_all_count_points_user}",
                        referral_user,
                        many=True
                    )
                self.operation_db.update_user_info_db(
                    {
                        col_info.referrals_count: referrals_count + 1,
                        col_info.referral_all_count_points_user:
                            referral_all_count_points_user + 1,
                    },
                    referral_user
                )
                self.operation_db.update_user_info_db(
                    {
                        col_info.referral_user: None
                    },
                    message.from_user.id
                )

        if count_generation > 0:
            place_birth = self.operation_db.select_user_info_db(
                col_info.place_birth,
                message.from_user.id,
            )
            if place_birth:
                text = """üîÆ –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–≥–Ω–æ–∑—É? –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.

üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏–ª–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.
‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.

–í—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ! ‚ú®"""
                keyboard = self.keyboard.start_generation_ikb
                await state.set_state(AllTypesGeneration()[message.text])
            else:
                text = "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ."
                keyboard = self.keyboard.no_generation_data_ikb
                await state.clear()

        elif message.from_user.id in self.config.ADMINS_ID and \
                count_generation > 0:
            self.operation_db.update_user_info_db(
                {
                    col_info.generation_count: 4
                },
                userid=message.from_user.id,
            )
            text = ("–Ø —É–∑–Ω–∞–ª –≤–∞—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–±–æ–ª–∂–∞—Ç—å.")
            keyboard = self.keyboard.start_generation_ikb
            await state.set_state(AllTypesGeneration()[message.text])

        else:
            text = ("–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. "
                    "–ù–æ–≤—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞ –≤ 00:00 –ø–æ –ú–°–ö.")
            keyboard = self.keyboard.main_menu_kb
            await state.clear()

        await message.answer(
            text=text,
            reply_markup=keyboard
        )

    def create_router(self):
        self.router.message.register(
            self.start_generation,
            AllTypesGeneration()
        )

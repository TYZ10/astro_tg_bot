import logging
from datetime import datetime

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import StateFilter

from . import (
    BasicBotOperation, states, AnalyzingCompatibilityRelationship,
    AllTypesGeneration
)


class MyDataBot(BasicBotOperation):

    def __init__(self, analyz_rel: AnalyzingCompatibilityRelationship):
        super().__init__(
            analyz_rel.config,
            analyz_rel.operation_db,
            analyz_rel.keyboard
        )
        self.analyz_rel: AnalyzingCompatibilityRelationship = analyz_rel

    async def my_data_handler(self, call: types.CallbackQuery):
        col_info = self.operation_db.COLUMNS_INFO

        data_birth, time_birth, place_birth = self.operation_db.select_user_info_db(
            f"{col_info.data_birth}, {col_info.time_birth}, "
            f"{col_info.place_birth}",
            call.from_user.id,
            many=True
        )

        if not (data_birth and time_birth and place_birth):
            data_birth = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            time_birth = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            place_birth = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        await call.message.answer(
            text=f"""üîÑ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤.

–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è?
–ë–æ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–æ–≤.

–ß—Ç–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å:

üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
‚è∞ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è
üåç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
–ï—Å–ª–∏ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –æ—à–∏–±–∫—É –∏–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ–±–Ω–æ–≤–∏ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏! üåü


–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data_birth}
–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {time_birth}
–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {place_birth}
""",
            reply_markup=self.keyboard.my_data_ikb,
            parse_mode="HTML"
        )

    async def modify_my_data(self,
                             call: types.CallbackQuery,
                             state: FSMContext):
        current_state = await state.get_state()

        if current_state == "states:analyzing_compatibility_relationship":
            is_partner = True
        else:
            is_partner = False

        await state.set_state(states.data_birth)
        await state.update_data(is_partner=is_partner)

        if is_partner:
            await call.message.answer(
                text="""‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å –≥–ª—É–±–∏–Ω—É –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π? –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä–æ–µ—Ç, –∫–∞–∫ –≤–∞—à–∏ —ç–Ω–µ—Ä–≥–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –∏ –∫–∞–∫–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤–∞—Å –∂–¥—É—Ç. –ù–∞ –æ—Å–Ω–æ–≤–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—ã —É–∑–Ω–∞–µ—à—å:
üí° –ß—Ç–æ –≤–∞—Å —Å–±–ª–∏–∂–∞–µ—Ç –∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç –≤–∞—à—É —Å–≤—è–∑—å.
‚öñÔ∏è –ö–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã.
üåü –ö–∞–∫ –ª—É—á—à–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è."""
            )

            text = ("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –≤ "
            "—Ñ–æ—Ä–º–∞—Ç–µ YYYY MM DD.\n\n"
            "–ü—Ä–∏–º–µ—Ä: 2000 01 21")
        else:
            text = ("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ "
            "—Ñ–æ—Ä–º–∞—Ç–µ YYYY MM DD.\n\n"
            "–ü—Ä–∏–º–µ—Ä: 2000 01 21")

        await call.message.answer(text=text,
                                  reply_markup=self.keyboard.abolition_ikb)

    async def get_data_birth(self, message: types.Message, state: FSMContext):
        data_birth = message.text
        try:
            data_birth = datetime.strptime(data_birth, '%Y %m %d')
        except:
            await message.answer(
                text=("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã."
                     "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ "
                     "—Ñ–æ—Ä–º–∞—Ç–µ YYYY MM DD (–≥–æ–¥ –º–µ—Å—è—Ü –¥–µ–Ω—å) —á–∏—Å–ª–∞–º–∏!\n\n"
                     "–ü—Ä–∏–º–µ—Ä: 2000 01 21"),
                reply_markup=self.keyboard.abolition_ikb)
            return

        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH MM SS.\n\n",
            reply_markup=self.keyboard.abolition_ikb
        )
        await state.set_state(states.time_birth)
        await state.update_data(data_birth=data_birth)

    async def get_time_birth(self, message: types.Message, state: FSMContext):
        time_birth = message.text
        try:
            time_birth = datetime.strptime(time_birth, '%H %M %S').time()
        except:
            await message.answer(
                text=("–í–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏."
                     "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ "
                     "—Ñ–æ—Ä–º–∞—Ç–µ HH MM SS (–ß–∞—Å—ã –º–∏–Ω—É—Ç—ã —Å–µ–∫—É–Ω–¥—ã) —á–∏—Å–ª–∞–º–∏!\n\n"
                     "–ü—Ä–∏–º–µ—Ä: 12 30 02"),
                reply_markup=self.keyboard.abolition_ikb)
            return
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è.",
            reply_markup=self.keyboard.abolition_ikb
        )
        await state.set_state(states.place_birth)
        await state.update_data(time_birth=time_birth)

    async def get_place_birth(self,
                              message: types.Message,
                              state: FSMContext):
        await message.answer(text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        st = await state.get_data()
        place_birth = message.text
        data_birth = st['data_birth']
        time_birth = st['time_birth']
        is_partner = st['is_partner']

        result = self.config.geocoder.geocode(
            place_birth,
            language='ru'
        )
        try:
            latitude = result['results'][0]['geometry']['lat'] # –®–∏—Ä–æ—Ç–∞
            longitude = result['results'][0]['geometry']['lng'] # –î–æ–ª–≥–æ—Ç–∞
        except:
            try:
                latitude = result[0]['geometry']['lat']  # –®–∏—Ä–æ—Ç–∞
                longitude = result[0]['geometry']['lng']  # –î–æ–ª–≥–æ—Ç–∞
            except:
                await message.answer(
                    text="–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–Ω–µ–µ.",
                    reply_markup=self.keyboard.abolition_ikb)
                return

        await state.clear()

        if is_partner:
            col_info = self.operation_db.COLUMNS_INFO

            (place_birth_2, latitude_2, longitude_2, time_birth_2,
             data_birth_2) = self.operation_db.select_user_info_db(
                f"{col_info.place_birth}, "
                f"{col_info.latitude}, "
                f"{col_info.longitude}, "
                f"{col_info.time_birth}, "
                f"{col_info.data_birth}",
                message.from_user.id,
                many=True
            )

            await self.analyz_rel.analyzing_compatibility_relationship(
                [place_birth, latitude, longitude, time_birth, data_birth],
                [place_birth_2, latitude_2, longitude_2,
                 time_birth_2, data_birth_2],
                message,
                state
            )
        else:
            col_info = self.operation_db.COLUMNS_INFO

            self.operation_db.update_user_info_db(
                {
                    col_info.place_birth: place_birth,
                    col_info.latitude: latitude,
                    col_info.longitude: longitude,
                    col_info.time_birth: time_birth,
                    col_info.data_birth: data_birth,
                },
                userid=message.from_user.id
            )

            await message.answer(text="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                                 reply_markup=self.keyboard.main_menu_kb)

    def create_router(self):
        self.router.callback_query.register(self.my_data_handler, F.data == "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.router.callback_query.register(self.modify_my_data,
                                   F.data == "modify my data")
        self.router.message.register(self.get_data_birth,
                            StateFilter(states.data_birth))
        self.router.message.register(self.get_time_birth,
                            StateFilter(states.time_birth))
        self.router.message.register(self.get_place_birth,
                            StateFilter(states.place_birth))
        self.router.callback_query.register(
            self.modify_my_data,
            F.data == "start generation",
            StateFilter(
                AllTypesGeneration.analyzing_compatibility_relationship.state
            )
        )

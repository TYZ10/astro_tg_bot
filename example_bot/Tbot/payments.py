import logging

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from yookassa import Payment, Configuration
from example_bot.misc.datetime_function import get_day_and_hours_from_date

from . import BasicBotOperation, states
from example_bot.misc.datetime_function import create_new_payments_end


class PaymentsBot(BasicBotOperation):

    async def __check_and_update_info_payments(
            self,
            payments_id,
            message_or_call: types.Message or types.CallbackQuery
    ):
        col_info = self.operation_db.COLUMNS_INFO

        if payments_id:
            if self.check_user_payments(payments_id):
                payments_end = self.operation_db.select_user_info_db(
                    col_info.payments_end,
                    message_or_call.from_user.id
                )
                new_pay_end_date = create_new_payments_end(payments_end)

                self.operation_db.update_user_info_db(
                    {
                        col_info.payments_id: None,
                        col_info.payments_end: new_pay_end_date
                    },
                    message_or_call.from_user.id
                )

                if isinstance(message_or_call, types.Message):
                    await message_or_call.answer(
                        text="–Ø –∑–∞–º–µ—Ç–∏–ª –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –≤–∞–º–∏ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏, "
                             "–ø—Ä–æ–¥–ª–µ–≤–∞—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.",
                        reply_markup=self.keyboard.main_menu_kb,
                    )
                else:
                    await message_or_call.message.answer(
                        text="–Ø –∑–∞–º–µ—Ç–∏–ª –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –≤–∞–º–∏ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏, "
                             "–ø—Ä–æ–¥–ª–µ–≤–∞—é –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É.",
                        reply_markup=self.keyboard.main_menu_kb,
                    )

                return True
            else:
                self.operation_db.update_user_info_db(
                    {
                        col_info.payments_id: None
                    },
                    message_or_call.from_user.id
                )

    def __create_payments(self, full_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"""

        #  https://yookassa.ru/developers/api#payment_object
        #  https://yookassa.ru/developers/api#create_payment
        try:
            Configuration.configure(self.config.store_id,
                                    self.config.the_secret_key)

            # payment = Payment.create({
            #     "amount": {
            #         "value": "150.00",
            #         "currency": "RUB"
            #     },
            #     "confirmation": {
            #         "type": "redirect",
            #         "return_url": self.config.URL_BOT
            #     },
            #     "capture": True,
            #     "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"})
            payment = Payment.create({
                "amount": {
                    "value": "150.00",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": self.config.URL_BOT
                },
                "capture": True,
                "description": "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
                "receipt": {
                    "customer": {
                        "full_name": f"{full_name}",
                        "email": "test@gmail.com",
                        "phone": "+79309437105"
                    },
                    "items": [
                        {
                            "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –≤ –±–æ—Ç–µ",
                            "quantity": "150.00",
                            "amount": {
                                "value": 1,
                                "currency": "RUB"
                            },
                            "vat_code": "2",
                            "payment_mode": "full_payment",
                            "payment_subject": "service",
                            "supplier": {
                                "name": "string",
                                "phone": "string"
                            }
                        },
                    ]
                }
            }
            )

            url = payment.confirmation.confirmation_url
            return payment.id, url
        except Exception as e:
            logging.exception(e, exc_info=True)
            return None, None

    async def __set_time_prediction(
            self,
            call: types.CallbackQuery,
            state: FSMContext
    ):
        col_info = self.operation_db.COLUMNS_INFO

        payments_end = self.operation_db.select_user_info_db(
            f"{col_info.referrals_count}, {col_info.payments_end}",
            call.message.from_user.id,
            many=True
        )
        if get_day_and_hours_from_date(payments_end) != 0:
            await call.message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å,\n"
                     "–û–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –≤—Ä–µ–º—è –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ –ú–°–ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:"
                     "HH MM (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã)"
            )
            await state.set_state(states.set_time_prediction)
        else:
            await call.message.answer(
                text="–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.",
                reply_markup=self.keyboard.main_menu_kb
            )

    @staticmethod
    def check_user_payments(payment_id) -> bool:
        try:
            payment = Payment.find_one(payment_id)
            if payment.status == "succeeded":
                return True
            else:
                return False
        except:
            return False

    async def start_payments(self, call: types.CallbackQuery):
        col_info = self.operation_db.COLUMNS_INFO

        referrals_count, payments_id = self.operation_db.select_user_info_db(
            f"{col_info.referrals_count}, {col_info.payments_id}",
            call.from_user.id,
            many=True
        )

        if await self.__check_and_update_info_payments(payments_id, call):
            return

        await call.message.answer(
            text="""‚ú® –ù–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è –º–∞–≥–∏–µ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–∏ —Å —Ç–æ–±–æ–π —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üí´

–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
üîπ –ü—Ä–∏–≥–ª–∞—Å–∏ 2 –¥—Ä—É–∑–µ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–º —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ —Å–¥–µ–ª–∞—é—Ç –ø–µ—Ä–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è! üéÅ
üîπ –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 150‚ÇΩ ‚Äî —ç—Ç–æ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π –≤–∫–ª–∞–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∏ –ø–æ–∫—Ä—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.

–ú—ã —Å –ª—é–±–æ–≤—å—é —Ä–∞–∑–≤–∏–≤–∞–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—á–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã. üíñ –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –º–∞–≥–∏–µ–π –∑–≤—ë–∑–¥! ‚ú®""",
            reply_markup=self.keyboard.payments_choice_ikb,
        )

    async def choice_payments(self, call: types.CallbackQuery):
        _, choice = call.data.split("_", maxsplit=1)

        col_info = self.operation_db.COLUMNS_INFO

        referrals_count = self.operation_db.select_user_info_db(
            col_info.referrals_count,
            call.from_user.id,
        )

        if choice == "point":
            if referrals_count >= 2:
                await call.message.answer(
                    text=f"–í–∞–º —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ "
                         f"(—Å–ø–∏—à–µ—Ç—Å—è 2 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–∞), –æ–ø–ª–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É?",
                    reply_markup=self.keyboard.ref_payments_ikb,
                )
            else:
                pay_id, url = self.__create_payments(call.from_user.full_name)

                if pay_id is None:
                    return

                self.operation_db.update_user_info_db(
                    {
                        col_info.payments_id: pay_id
                    },
                    call.from_user.id
                )
                await call.message.answer(
                    text="–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã "
                         f"–ø–æ–¥–ø–∏—Å–∫–∏, (—É –≤–∞—Å {referrals_count} –±–∞–ª–ª–æ–≤, –¥–ª—è –æ–ø–ª–∞—Ç—ã "
                         f"–Ω—É–∂–Ω–æ 2 –±–∞–ª–ª–∞), –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ "
                         f"150—Ä—É–±.",
                    reply_markup=self.keyboard.create_payments_ikb(
                        url=url,
                        id=pay_id,
                    ),
                )
        else:
            pay_id, url = self.__create_payments(call.from_user.full_name)

            if pay_id is None:
                return

            self.operation_db.update_user_info_db(
                {
                    col_info.payments_id: pay_id
                },
                call.from_user.id
            )

            await call.message.answer(
                text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü —Å—Ç–æ–∏—Ç 150 —Ä—É–±.",
                reply_markup=self.keyboard.create_payments_ikb(
                    url=url,
                    id=pay_id,
                ),
            )

    async def ref_payments(self, call: types.CallbackQuery, state: FSMContext):
        col_info = self.operation_db.COLUMNS_INFO

        referrals_count, payments_end = self.operation_db.select_user_info_db(
            f"{col_info.referrals_count}, {col_info.payments_end}",
            call.message.from_user.id,
            many=True
        )

        self.operation_db.update_user_info_db(
            {
                col_info.payments_id: None,
                col_info.payments_end: create_new_payments_end(payments_end),
                col_info.referrals_count: referrals_count - 2,
                col_info.generation_count: 10
            },
            call.from_user.id
        )

        await call.message.answer(
            text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 2 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–∞–ª–ª–∞",
            reply_markup=self.keyboard.main_menu_kb,
        )

        await self.__set_time_prediction(call, state)

    async def check_payments(self, call: types.CallbackQuery, state: FSMContext):
        _, id = call.data.split("_", maxsplit=1)

        if self.check_user_payments(id):
            col_info = self.operation_db.COLUMNS_INFO
            payments_end = self.operation_db.select_user_info_db(
                col_info.payments_end,
                call.from_user.id
            )
            new_pay_end_date = create_new_payments_end(payments_end)

            self.operation_db.update_user_info_db(
                {
                    col_info.payments_id: None,
                    col_info.payments_end: new_pay_end_date,
                    col_info.generation_count: 10
                },
                call.from_user.id
            )

            await call.message.answer(
                text="–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É",
                reply_markup=self.keyboard.main_menu_kb,
            )

            await self.__set_time_prediction(call, state)
        else:
            await call.answer(
                text="–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É!"
            )

    def create_router(self):
        self.router.callback_query.register(self.start_payments,
                                     F.data == "payments")
        self.router.callback_query.register(
            self.check_payments,
            F.data.split("_")[0] == "check payment"
        )
        self.router.callback_query.register(
            self.ref_payments,
            F.data == "ref payments"
        )
        self.router.callback_query.register(
            self.choice_payments,
            F.data.split("_")[0] == "choice payments"
        )
        self.router.callback_query.register(
            self.__set_time_prediction,
            F.data == "set time prediction"
        )
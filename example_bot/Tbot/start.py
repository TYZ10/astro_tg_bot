import asyncio

from aiogram.filters.command import Command
from aiogram import types
from aiogram.fsm.context import FSMContext

from . import BasicBotOperation
from .filters import CheckSubFilter


class StartBot(BasicBotOperation):
    async def start(self, message: types.Message, state: FSMContext):
        """–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö—ç–Ω–¥–ª–µ—Ä"""

        is_new_user = self.operation_db.insert_new_user(
            message.from_user.id,
            message.from_user.full_name,
            message.from_user.username
        )

        await message.answer(
            text=f"""–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! üåå
–ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞, –∏ —è —Å–æ–∑–¥–∞–ª–∞ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è. –≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ —Ç–æ—á–Ω—ã–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á—ë—Ç—ã, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–π –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.

–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å?
‚ú® –†–∞–∑–±–æ—Ä —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç, —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏–π —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–ª–∞–Ω—Ç—ã.
üåü –¢–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏–ª–∏ –≥–æ–¥, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.
‚ù§Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –±–ª–∏–∑–∫–∏–º–∏.
üíº –ë–∏–∑–Ω–µ—Å-–≥–æ—Ä–æ—Å–∫–æ–ø, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —à–∞–≥–æ–≤.

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–µ–±–µ –±–æ–ª—å—à–µ —è—Å–Ω–æ—Å—Ç–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º –∏ –≥–∞—Ä–º–æ–Ω–∏–∏ –≤ –∂–∏–∑–Ω–∏. –ò –≤—Å—ë —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–≥—Ä—É–∑–∏—Å—å –≤ –º–∞–≥–∏—é –∑–≤—ë–∑–¥. –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üöÄ""",
            reply_markup=self.keyboard.main_menu_kb
        )

        await asyncio.sleep(1)

        if is_new_user:
            await self.subscribe(message, state)

            ref_userid = message.text.split(' ', 1)[-1]
            if ref_userid != '/start':
                ref_userid = int(ref_userid)
                print(ref_userid)

                col_info = self.operation_db.COLUMNS_INFO

                referral_all_count_user = \
                    self.operation_db.select_user_info_db(
                        col_info.referral_all_count_user,
                        ref_userid
                    )

                self.operation_db.update_user_info_db(
                    {
                        col_info.referral_all_count_user:
                            referral_all_count_user + 1
                    },
                    ref_userid
                )

                self.operation_db.update_user_info_db(
                    {
                        col_info.referral_user: ref_userid
                    },
                    message.from_user.id
                )

    async def subscribe(self, message_or_call, state: FSMContext):
        """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""

        await state.clear()

        if isinstance(message_or_call, types.CallbackQuery):
            message_or_call = message_or_call.message

        await message_or_call.answer(
            text="""–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. üåå –ë–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî –æ–Ω–∞ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–≥–æ —Ä–∞–±–æ—Ç—É –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ.

–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–≥–Ω–æ–∑–∞–º, —Ä–∞–∑–±–æ—Ä—É –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –¥—Ä—É–≥–∏–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º. ‚ú®

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å—é–¥–∞. üöÄ""",
            reply_markup=self.keyboard.subscribe_ikb
        )
        await message_or_call.answer(
            text="–ü–µ—Ä–µ–º–µ—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.keyboard.main_menu_kb
        )

    def create_router(self):
        self.router.message.register(self.start, Command("start"))
        self.router.message.register(self.subscribe,
                                     CheckSubFilter(self.config,
                                                    self.operation_db))
        self.router.callback_query.register(self.subscribe,
                                            CheckSubFilter(self.config,
                                                           self.operation_db))
